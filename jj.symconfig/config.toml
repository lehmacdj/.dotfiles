"$schema" = "https://jj-vcs.github.io/jj/latest/config-schema.json"

[user]
name = "Devin Lehmacher"
email = "lehmacdj@gmail.com"

[git]
private-commits = "private()"

[ui]
default-command = ["log", "-r", "default_command_log()"]
diff-editor = ":builtin"

[revsets]
simplify-parents = 'mutable()'

[aliases]
rebase-all = ["rebase", "-s", "roots(trunk()..mutable()) & ~saved()", "-d", "trunk()"]
pull = ["util", "exec", "--", "bash", "-c", "jj git fetch && jj rebase-all && jj simplify-parents"]
push = ["git", "push", "--tracked"]
sq = ["squash"]
ca = ["util", "exec", "--", "jj-commit-after"]
c = ["util", "exec", "--", "jj-commit-after", "heads(::push_point() & bookmarks())"]
pp = ["util", "exec", "--", "bash", "-c", "jj pull && jj push"]
tug = [
  "bookmark", "move",
  "--from",
  "heads(::push_point() & bookmarks())",
  "--to",
  "coalesce(push_point() & ~unfinished() & ~private(), push_point()- & ~private() & bookmarks()::)"
]
convert-to-colocated = ["util", "exec", "--", "jj-convert-to-colocated"]

# work things
submit = ["util", "exec", "--", "jj-submit"]
pre-commit = ["util", "exec", "--", "jj-pre-commit"]

[revset-aliases]
'local_trunk()' = 'coalesce(bookmarks("main"), bookmarks("master"))'
# generalized version of the default for `jj log` which at time of writing was:
# 'present(@) | ancestors(immutable_heads().., 2) | present(trunk())'
'summary(exclude)' = 'present(@) | ancestors(exclude.., 2) | present(trunk())'
# the log set I use for the ui.default-command, `jj log` gives me the original
# default and I use it a decent amount too
'default_command_log()' = 'summary(saved() | immutable_heads() | local_trunk())'
# we consider some changes saved to avoid rebasing them
'saved()' = "description(regex:'saved:.*')"
# a "mega merge" on top of which we base private development efforts
# I used "meta merge" originally because I misremembered the commonly used
# terminology, for backwards compatibility with my old repos I allow both
'mega_merge()' = "description(regex:'^priv: (mega|meta) merge')"
# short form, this can technically be just `m`, but I'm being cautious because
# that can conflict with change ids potentially
'm()' = "mega_merge()"
# the place from below which we push changes to the remote from
# if we have a meta merge we push from below it, otherwise we assume we push
# from the current head
'push_point()' = "coalesce(mega_merge() & ::@, @)"
'no_description()' = "description(regex:'^$')"
# commits that would be removed if we left them to edit something else
'ephemeral()' = "no_description() & empty()"
'unfinished()' = "empty() | mega_merge() | description(regex:'^$|^wip:.*')"
'private()' = "description(regex:'(priv(|ate)|wip):.*')"

[fix.tools.ormolu]
command = ["ormolu", "--stdin-input-file", "$path"]
patterns = ["glob:'**/*.hs'"]
enabled = false
