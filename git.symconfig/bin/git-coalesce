#!/usr/bin/env bash
set -euo pipefail

# Coalesce changes to a file since a given commit.
# This deletes all changes to the file in BASE_COMMIT..HEAD and applies them
# cumulatively in a single commit.

if [ $# -lt 2 ]; then
  echo "Usage: git coalesce <BASE_COMMIT> <FILE_PATH>"
  exit 1
fi
BASE_COMMIT="$1"
FILE_PATH="${GIT_PREFIX:-}$2"

# Verify base commit exists
if ! git rev-parse --verify "$BASE_COMMIT" >/dev/null 2>&1; then
  echo "Error: Base commit '$BASE_COMMIT' does not exist."
  exit 1
fi

# Create a temporary patch of changes since BASE_COMMIT
TEMP_PATCH="$(mktemp)"
if ! git diff --binary "$BASE_COMMIT" -- "$FILE_PATH" > "$TEMP_PATCH"; then
  echo "Failed to generate diff."
  rm "$TEMP_PATCH"
  exit 1
fi

# Inspect the file at BASE_COMMIT (if it exists)
LS_TREE_OUTPUT="$(git ls-tree "$BASE_COMMIT" -- "$FILE_PATH" || true)"
if [ -z "$LS_TREE_OUTPUT" ]; then
  echo "Note: '$FILE_PATH' did not exist at commit '$BASE_COMMIT'."
  TYPE="none"
  MODE_SHA1=""
else
  MODE_SHA1="$(echo "$LS_TREE_OUTPUT" | awk '{print $1","$3}')"
  TYPE="$(echo "$LS_TREE_OUTPUT" | awk '{print $2}')"
fi
TEMP_VERBOSE_LOG="$(mktemp)"

# Construct our index-filter depending on the fileâ€™s type at BASE_COMMIT
if [ "$TYPE" = "blob" ]; then
  INDEX_FILTER="git rm -r --cached --ignore-unmatch '$FILE_PATH' >'$TEMP_VERBOSE_LOG' 2>&1;
    git update-index --add --cacheinfo $MODE_SHA1,'$FILE_PATH' >'$TEMP_VERBOSE_LOG' 2>&1"
elif [ "$TYPE" = "tree" ]; then
  INDEX_FILTER="git rm -r --cached --ignore-unmatch '$FILE_PATH' >'$TEMP_VERBOSE_LOG' 2>&1;
    git read-tree --prefix='$FILE_PATH/' '$BASE_COMMIT':'$FILE_PATH' >'$TEMP_VERBOSE_LOG' 2>&1"
elif [ "$TYPE" = "none" ]; then
  # The file did not exist in BASE_COMMIT; remove it from all intermediate commits
  INDEX_FILTER="git rm -r --cached --ignore-unmatch '$FILE_PATH' >'$TEMP_VERBOSE_LOG' 2>&1"
else
  echo "Unsupported type '$TYPE' for '$FILE_PATH'"
  rm "$TEMP_PATCH"
  exit 1
fi

# Call filter-branch to remove or revert changes to the file in all commits from BASE_COMMIT..HEAD
OLD_COMMITS="$(git rev-list "$BASE_COMMIT"..HEAD)"
if ! FILTER_BRANCH_SQUELCH_WARNING=1 git filter-branch \
     --prune-empty \
     --index-filter "$INDEX_FILTER" \
     -- "$BASE_COMMIT"..HEAD; then
  echo "Filter-branch failed. Verbose logs are in '$TEMP_VERBOSE_LOG'."
  rm "$TEMP_PATCH"
  exit 1
fi
rm "$TEMP_VERBOSE_LOG"
NEW_COMMITS="$(git rev-list "$BASE_COMMIT"..HEAD)"
# Clean up refs/original to avoid warnings
git for-each-ref --format="%(refname)" refs/original/ | xargs -n 1 git update-ref -d
if [ "$OLD_COMMITS" = "$NEW_COMMITS" ]; then
  echo "git coalesce: no changes to coalesce"
  rm "$TEMP_PATCH"
  exit 0
fi

# Apply the patch and commit
if [ ! -s "$TEMP_PATCH" ]; then
  echo "No net changes to '$FILE_PATH' since '$BASE_COMMIT'. Intermediate changes have been removed."
  rm "$TEMP_PATCH"
  exit 0
fi
if ! git apply --binary "$TEMP_PATCH"; then
  echo "Failed to apply cumulative changes."
  rm "$TEMP_PATCH"
  exit 1
fi
git add "$FILE_PATH"
if ! git commit -m "Coalesced changes to $FILE_PATH"; then
  echo "Failed to commit changes."
  rm "$TEMP_PATCH"
  exit 1
fi

rm "$TEMP_PATCH"
