[user]
  name = Devin Lehmacher
  email = lehmacdj@gmail.com

[push]
  default = simple

[core]
  autocrlf = false

[alias]
  # Aliases
  status = status -sb
  unstage = reset -q HEAD --
  last = log -1 HEAD
  discard = checkout --
  reset-skipped = !git update-index --no-skip-worktree "$@" && git checkout -- "$@"
  precommit = diff --cached --diff-algorithm=minimal -w
  amend = "!do_amend(){ \
  if [ \"$1\" == '' ] ; then \
    git commit --amend --no-edit; \
  elif [ \"$1\" == '-a' ]; then \
    git commit --amend -a --no-edit; \
  else \
    git commit --amend \"$@\"; \
  fi; \
}; do_amend"
  # checkout fuzzy
  cf = !git for-each-ref --sort=committerdate --format=$'%(refname:short)\t%(committerdate:relative)' refs/heads | awk -F'\t' '{ printf \"%-50s %s\\n\", $1, $2 }' | fzf --tac --no-sort | cut -f 1 -d' ' | xargs -n1 git checkout
  bc = "!do_branch_cleanup() { \
    while true; do \
        branch=$(git for-each-ref --sort=-committerdate --format=$'%(refname:short)\t%(committerdate:relative)' refs/heads | \
                 grep -v '^saved/' | \
                 awk -F'\t' '{ printf \"%-50s %s\\n\", $1, $2 }' | \
                 fzf --tac --no-sort --exit-0); \
        if [ -z \"$branch\" ]; then \
            echo \"No branch selected. Exiting.\"; \
            break; \
        fi; \
        branch_name=$(echo \"$branch\" | cut -f 1 -d' '); \
        git branch -D \"$branch_name\"; \
    done; \
}; do_branch_cleanup"
  # coalesce changes to a file since a given commit
  # this deletes all changes to the file in BASE_COMMIT..HEAD and applies them
  # cumulatively in a single commit
  coalesce-file = "!f() { \
    if [ -z \"$1\" ] || [ -z \"$2\" ]; then \
      echo \"Usage: git coalesce-file <BASE_COMMIT> <FILE_PATH>\"; \
      exit 1; \
    fi; \
    BASE_COMMIT=\"$1\"; \
    FILE_PATH=\"${GIT_PREFIX:-./}$2\"; \
    if ! git rev-parse --verify \"$BASE_COMMIT\" >/dev/null 2>&1; then \
      echo \"Error: Base commit '$BASE_COMMIT' does not exist.\"; \
      exit 1; \
    fi; \
    if ! git ls-tree \"$BASE_COMMIT\" -- \"$FILE_PATH\" >/dev/null 2>&1; then \
      echo \"Error: File '$FILE_PATH' does not exist at commit '$BASE_COMMIT'.\"; \
      exit 1; \
    fi; \
    TEMP_PATCH=\"$(mktemp)\"; \
    git diff --binary \"$BASE_COMMIT\" -- \"$FILE_PATH\" > \"$TEMP_PATCH\" || { echo \"Failed to generate diff.\"; rm \"$TEMP_PATCH\"; exit 1; }; \
    if [ ! -s \"$TEMP_PATCH\" ]; then \
      echo \"No changes to '$FILE_PATH' since '$BASE_COMMIT'. Skipping coalesce-file.\"; \
      rm \"$TEMP_PATCH\"; \
      exit 0; \
    fi; \
    MODE_SHA1=\"$(git ls-tree \"$BASE_COMMIT\" \"$FILE_PATH\" | awk '{print $1\",\"$3}')\"; \
    if [ -z \"$MODE_SHA1\" ]; then \
      echo \"Failed to get mode and SHA1 of file at base commit.\"; \
      rm \"$TEMP_PATCH\"; \
      exit 1; \
    fi; \
    FILTER_BRANCH_SQUELCH_WARNING=1 git filter-branch --prune-empty --index-filter \
      \"git rm --cached --ignore-unmatch '$FILE_PATH'; git update-index --add --cacheinfo $MODE_SHA1,'$FILE_PATH'\" \
      -- \"$BASE_COMMIT\"..HEAD \
      || { echo \"Filter-branch failed.\"; rm \"$TEMP_PATCH\"; exit 1; }; \
    git for-each-ref --format=\"%(refname)\" refs/original/ | xargs -n 1 git update-ref -d; \
    git apply --binary \"$TEMP_PATCH\" || { echo \"Failed to apply cumulative changes.\"; rm \"$TEMP_PATCH\"; exit 1; }; \
    git add \"$FILE_PATH\"; \
    git commit -m \"Coalesced changes to $FILE_PATH\" || { echo \"Failed to commit changes.\"; rm \"$TEMP_PATCH\"; exit 1; }; \
    rm \"$TEMP_PATCH\"; \
  }; f"
  conflicts = diff --name-only --diff-filter=U
  added-lines = !git add -N . && git diff --numstat | cut -f 1 -d '	' | awk 'BEGIN { sum = 0 } { sum = sum + $0 } END { print sum }'
  # push force (safer and shorter than `push --force`)
  pf = push --force-with-lease
  # copy the current branch name
  copy-branch = !git rev-parse --abbrev-ref HEAD | ghead -c -1 | pbcopy
  bump-ci = "!do_bump_ci(){ \
  if [ -z "$(git status --porcelain)" ]; then \
    git commit --allow-empty -m \"force CI to retrigger\" && git push; \
  else \
    echo \"There are uncommitted changes\"; \
  fi;\
}; do_bump_ci"
  # list TODOs in files changed by this PR
  todos = !git diff --name-only origin/master | xargs grep -n "TODO"
  # rebase --continue without editing the commit message
  rc = -c core.editor=: rebase --continue
  # push and pull
  pp = "!git pull --rebase && git push"
  # Shorter versions of standard git commands
  s = status -sb
  l = log --oneline -n 16
  a = add
  co = checkout
  ci = commit

[sendemail]
  smtpuser = lehmacdj@gmail.com
  smtpserver = smtp.googlemail.com
  smtpencryption = tls
  smtpserverport = 587
  suppresscc = self

[pull]
  rebase = true
[log]
  follow = true

[merge]
  tool = nvimdiff
[mergetool]
  prompt = true
[mergetool "nvimdiff"]
  cmd = nvim -d $LOCAL $BASE $REMOTE $MERGED -c '$wincmd w' -c '$wincmd J'
[diff]
  tool = nvimdiff
  colorMoved = true
  colorMovedWS = allow-indentation-change
[difftool]
  prompt = true
[difftool "nvimdiff"]
  cmd = nvim -d $LOCAL $REMOTE $MERGED -c '$wincmd w' -c '$wincmd J'
[init]
  defaultBranch = main
  templateDir = ~/.config/git/template
[rebase]
  autosquash = true
  # don't flatten merges (i.e. makes --rebase-merges the default for git rebase)
  rebaseMerges = true
  # automatically update branches based on the current branch
  updateRefs = true
[fetch]
  prune = true
[advice]
  detachedHead = false
